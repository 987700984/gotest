// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserInfo_GetUser_FullMethodName  = "/user.UserInfo/getUser"
	UserInfo_GetUser1_FullMethodName = "/user.UserInfo/getUser1"
)

// UserInfoClient is the client API for UserInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInfoClient interface {
	GetUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error)
	GetUser1(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error)
}

type userInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInfoClient(cc grpc.ClientConnInterface) UserInfoClient {
	return &userInfoClient{cc}
}

func (c *userInfoClient) GetUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error) {
	out := new(UserInfoReponse)
	err := c.cc.Invoke(ctx, UserInfo_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoClient) GetUser1(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error) {
	out := new(UserInfoReponse)
	err := c.cc.Invoke(ctx, UserInfo_GetUser1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInfoServer is the server API for UserInfo service.
// All implementations must embed UnimplementedUserInfoServer
// for forward compatibility
type UserInfoServer interface {
	GetUser(context.Context, *IdRequest) (*UserInfoReponse, error)
	GetUser1(context.Context, *IdRequest) (*UserInfoReponse, error)
	mustEmbedUnimplementedUserInfoServer()
}

// UnimplementedUserInfoServer must be embedded to have forward compatible implementations.
type UnimplementedUserInfoServer struct {
}

func (UnimplementedUserInfoServer) GetUser(context.Context, *IdRequest) (*UserInfoReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserInfoServer) GetUser1(context.Context, *IdRequest) (*UserInfoReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser1 not implemented")
}
func (UnimplementedUserInfoServer) mustEmbedUnimplementedUserInfoServer() {}

// UnsafeUserInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInfoServer will
// result in compilation errors.
type UnsafeUserInfoServer interface {
	mustEmbedUnimplementedUserInfoServer()
}

func RegisterUserInfoServer(s grpc.ServiceRegistrar, srv UserInfoServer) {
	s.RegisterService(&UserInfo_ServiceDesc, srv)
}

func _UserInfo_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInfo_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServer).GetUser(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfo_GetUser1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServer).GetUser1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInfo_GetUser1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServer).GetUser1(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInfo_ServiceDesc is the grpc.ServiceDesc for UserInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserInfo",
	HandlerType: (*UserInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUser",
			Handler:    _UserInfo_GetUser_Handler,
		},
		{
			MethodName: "getUser1",
			Handler:    _UserInfo_GetUser1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

const (
	UserAction_GetUser_FullMethodName  = "/user.UserAction/getUser"
	UserAction_GetAAF_FullMethodName   = "/user.UserAction/getAAF"
	UserAction_GetUser1_FullMethodName = "/user.UserAction/getUser1"
)

// UserActionClient is the client API for UserAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserActionClient interface {
	GetUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error)
	GetAAF(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error)
	GetUser1(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error)
}

type userActionClient struct {
	cc grpc.ClientConnInterface
}

func NewUserActionClient(cc grpc.ClientConnInterface) UserActionClient {
	return &userActionClient{cc}
}

func (c *userActionClient) GetUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error) {
	out := new(UserInfoReponse)
	err := c.cc.Invoke(ctx, UserAction_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) GetAAF(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error) {
	out := new(UserInfoReponse)
	err := c.cc.Invoke(ctx, UserAction_GetAAF_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionClient) GetUser1(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoReponse, error) {
	out := new(UserInfoReponse)
	err := c.cc.Invoke(ctx, UserAction_GetUser1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserActionServer is the server API for UserAction service.
// All implementations must embed UnimplementedUserActionServer
// for forward compatibility
type UserActionServer interface {
	GetUser(context.Context, *IdRequest) (*UserInfoReponse, error)
	GetAAF(context.Context, *IdRequest) (*UserInfoReponse, error)
	GetUser1(context.Context, *IdRequest) (*UserInfoReponse, error)
	mustEmbedUnimplementedUserActionServer()
}

// UnimplementedUserActionServer must be embedded to have forward compatible implementations.
type UnimplementedUserActionServer struct {
}

func (UnimplementedUserActionServer) GetUser(context.Context, *IdRequest) (*UserInfoReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserActionServer) GetAAF(context.Context, *IdRequest) (*UserInfoReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAAF not implemented")
}
func (UnimplementedUserActionServer) GetUser1(context.Context, *IdRequest) (*UserInfoReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser1 not implemented")
}
func (UnimplementedUserActionServer) mustEmbedUnimplementedUserActionServer() {}

// UnsafeUserActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserActionServer will
// result in compilation errors.
type UnsafeUserActionServer interface {
	mustEmbedUnimplementedUserActionServer()
}

func RegisterUserActionServer(s grpc.ServiceRegistrar, srv UserActionServer) {
	s.RegisterService(&UserAction_ServiceDesc, srv)
}

func _UserAction_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAction_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).GetUser(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_GetAAF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).GetAAF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAction_GetAAF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).GetAAF(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAction_GetUser1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionServer).GetUser1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAction_GetUser1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionServer).GetUser1(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAction_ServiceDesc is the grpc.ServiceDesc for UserAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserAction",
	HandlerType: (*UserActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUser",
			Handler:    _UserAction_GetUser_Handler,
		},
		{
			MethodName: "getAAF",
			Handler:    _UserAction_GetAAF_Handler,
		},
		{
			MethodName: "getUser1",
			Handler:    _UserAction_GetUser1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
